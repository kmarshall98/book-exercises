ggplot(data = diamonds) +
geom_col(mapping = aes(x = cuts, y = price, fill = clarity))
library("ggplot2")
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cuts, y = price, fill = clarity))
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity))
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity), position = dodge)
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity), position = "dodge")
ggplot(data = diamonds) +
geom_point(mapping = aes(x = cut, y = clarity))
# Use the "jitter" position adjustment to keep the points from all overlapping!
# (This works a little better with a sample of diamond data, such as from the
# previous exercise).
diamonds_sample <- sample_n(diamonds, 1000)
library("dplyr")
# Use the "jitter" position adjustment to keep the points from all overlapping!
# (This works a little better with a sample of diamond data, such as from the
# previous exercise).
diamonds_sample <- sample_n(diamonds, 1000)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = cut, y = clarity))
diamonds_sample <- sample_n(diamonds, 1000)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = cut, y = clarity), position = "jitter")
ggplot(data =  diamonds) +
geom_boxplot(mapping = aes(x = color, y = price))
ggplot(data =  diamonds) +
geom_boxplot(mapping = aes(x = color, y = price), scale_x_log10())
ggplot(data =  diamonds) +
geom_boxplot(mapping = aes(x = color, y = price) +
scale_x_log10()
ggplot(data =  diamonds) +
geom_boxplot(mapping = aes(x = color, y = price) +
scale_y_log10()
ggplot(data =  diamonds) +
geom_boxplot(mapping = aes(x = color, y = price))
ggplot(data =  diamonds) +
geom_boxplot(mapping = aes(x = color, y = price) +
scale_y_log10()
