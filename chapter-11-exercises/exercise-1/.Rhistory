# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturerer_vector <- vehicles$make
print(manufacturerer_vector)
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(manufacturerer_vector, incomparables = FALSE)
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
nrows(unique(manufacturerer_vector, incomparables = FALSE))
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
manufacturer_no_duplicates <- unique(manufacturerer_vector, incomparables = FALSE)
length(manufacturer_no_duplicates)
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
manufacturer_count <- length(unique(manufacturerer_vector, incomparables = FALSE))
# Filter the data set for vehicles manufactured in 1997
vehicles_of_1997 <- vehicles$id[vehicles$year == "1997"]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(vehicles$vehicles_of_1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(vehicles_of_1997$year)
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(vehicles$vehicles$id[vehicles$year == "1997"])
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(vehicles$id[vehicles$year == "1997"])
# Filter the data set for vehicles manufactured in 1997
vehicles_of_1997 <- vehicles[vehicles$year == "1997"]
# Filter the data set for vehicles manufactured in 1997
vehicles_of_1997 <- vehicles[vehicles$year == "1997",]
print(vehicles_of_1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(vehicles$id[vehicles$year == "1997"])
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Install devtools package: allows installations from GitHub
install.packages("devtools")
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles <- mutate(vehicles, average = mean(hwy +cty))
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles <- mutate(vehicles, average = mean(hwy))
# Exercise 1: working with data frames (review)
install.packages("dyplr")
library("dyplr")
# Exercise 1: working with data frames (review)
install.packages("dyplr")
# Exercise 1: working with data frames (review)
install.packages("tidyverse")
library("tidyverse")
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles <- mutate(vehicles, average = mean(hwy))
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles <- mutate(vehicles, average = mean(vehicles$hwy + vehicles$cty))
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles$average <- mean(vehicles$hwy + vehicles$cty)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles$average <- mean(vehicles[hwy,] + vehicles[cty,])
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles$average <- mean(vehicles$hwy +vehicles$cty)
View(vehicles)
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Install and load the "dplyr" library
library("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- select(vehicles, make)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(makes)
# Filter the data set for vehicles manufactured in 1997
cars_1997 <- filter(vehicles, year == 1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
arrange(cars_1997, -hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997 <- mutate(cars_1997, average = (hwy + cty) / 2 )
View(cars_1997)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
cars_1997_2wd <- filter(vehicles, drive == "2-Wheel Drive", cty > 20)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(filter(cars_1997_2wd, hwy == min(hwy)), id)
select(filter(vehicles, year = year_choice, hwy = max(hwy)), id)
most_miles_per_gallon_of_year <- function(year_choice, make_choice) {
select(filter(vehicles, year = year_choice, hwy = max(hwy)), id)
}
# What was the most efficient Honda model of 1995?
most_miles_per_gallon_of_year(1995, Honda)
select(filter(vehicles, year = year_choice, hwy = max(hwy)), make_choice)
most_miles_per_gallon_of_year <- function(year_choice, make_choice) {
select(filter(vehicles, year = year_choice, hwy = max(hwy)), make_choice)
}
# What was the most efficient Honda model of 1995?
most_miles_per_gallon_of_year(1995, Honda)
